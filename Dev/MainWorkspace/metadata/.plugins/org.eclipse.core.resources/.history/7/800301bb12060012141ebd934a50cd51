package com.lwan.musicsync.main;

import javafx.beans.property.Property;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.effect.BlurType;
import javafx.scene.effect.DropShadow;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.Shape;

public class RatingsEdit extends GridPane implements EventHandler<MouseEvent>{
	static final Color activeDefFill = Color.GOLD;
	static final Color inactiveDefFill = Color.AZURE;
	static final Color activeDefBorder = Color.BROWN;
	static final Color inactiveDefBorder = Color.MIDNIGHTBLUE;
	
	protected Star[] stars;
	protected Property<Number> ratingsProperty;
	protected boolean isMouseOver;
	protected int mouseOverRatings;
	
	public RatingsEdit(Property<Number> valueProperty){
		stars = new Star[5];
		for (int i = 0; i < 5; i++) {
			stars[i] = new Star();
			add(stars[i], i, 0);
		}
		
		setOnMouseExited(this);
		setOnMouseClicked(this);
		setOnMouseMoved(this);
		
		ratingsProperty().addListener(new ChangeListener<Number>() {
			public void changed(ObservableValue<? extends Number> arg0,
					Number oldValue, Number newValue) {
				doDisplayState();
			}
		});
		
		ratingsProperty().bindBidirectional(valueProperty);
	}
	
	protected void doDisplayState() {
		for (int i = 0; i < 5; i++) {
			Star s = stars[i];
			if(isMouseOver) {
				s.setMouseOver(i < Math.max(ratingsProperty().getValue().intValue(), mouseOverRatings));
			} else {
				s.setDefault(i < ratingsProperty().getValue().intValue());
			}
		}
	}
	
	public Property<Number> ratingsProperty() {
		if (ratingsProperty == null) {
			ratingsProperty = new SimpleIntegerProperty();
		}
		return ratingsProperty;
	}
	
	protected Shape createStar() {
		Polygon p = new Polygon(2, 10, 5, 0, 8, 10, 0, 4, 10, 4);
		DropShadow border = new DropShadow();
		border.setBlurType(BlurType.GAUSSIAN);
		border.setRadius(2);
		p.setEffect(border);
		p.setStrokeWidth(1);
		p.setStroke(Color.TRANSPARENT);
		
		return p;
	}
	
	protected class Star extends Group {
		Shape star;
		DropShadow border;
		
		Star () {
			star = createStar();
			border = (DropShadow)star.getEffect();
			
			getChildren().add(star);
		}
		
		void setMouseOver(boolean active) {
			if (active) {
				star.setFill(activeDefFill);
				border.setColor(activeDefBorder);
			} else {
				star.setFill(inactiveDefFill);
				border.setColor(activeDefBorder);
			}
		}
		
		void setDefault(boolean active) {
			if (active) {
				star.setFill(activeDefFill);
				border.setColor(activeDefBorder);
			} else {
				star.setFill(inactiveDefFill);
				border.setColor(inactiveDefBorder);
			}
		}
	}

	@Override
	public void handle(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}
}
