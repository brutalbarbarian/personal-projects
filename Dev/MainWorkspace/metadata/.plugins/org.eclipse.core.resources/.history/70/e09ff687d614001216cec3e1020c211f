package com.lwan.bo;

import javafx.beans.property.Property;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;

public class BOAttribute <T> extends BOObject implements ChangeListener<T> {
	/* Properties Declarations */
	private Property<Boolean> allow_nulls;
//	private Property<T> null_value;
	private Property<T> default_value;
	
	private Property<T> value;
	
	
	/* Property accessors */
	public Property<T> Value() {
		if (value == null) {
			value = new SimpleObjectProperty<>(this, "Value");
		}
		return value;
	}
	
	// allow nulls
	// null value
	// previous value
	// current value
	// original value
	
	public BOAttribute(BOObject parent, String name) {
		super(parent, name);
		
		Value().addListener(this);
	}

	public T getValue() {
		
		return null;
	}
	

	public void setValue(T val) {
		
	}

	
	
	public void changed(ObservableValue<? extends T> observable, T oldValue,
			T newValue) {
		
	}
	
	/**
	 * Sets the attribute back to null if allowsNull is true.
	 * Otherwise sets it the the default value
	 * 
	 */
	protected void clear() {
		
	}
	
	/**
	 * Sets the attribute back to default, or null if no default is set.
	 * 
	 */
	protected void clearAttributes() {
		
	}
	
	/* Not relevant for attributes */ 
	protected void doSave() {}
	public void doDelete() {}
	protected boolean populateAttributes() {return true;}
	protected void createAttributes() {}
	public void handleModified(ModifiedEvent source) {}	
}
